{"version":3,"sources":["Module.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["tryConvert","value","temperatureUnit","temp","input","Number","isNaN","roundNumber","convertFtoC","convertRtoC","val","parseFloat","Math","round","toString","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputUnit","studentResponse","targetUnit","correction","error","message","onChange","bind","assertThisInitialized","onSubmit","onKeyPress","e","preventDefault","setState","defineProperty","target","name","console","log","keyCode","a","b","record","inputSplitArray","trim","split","length","unit","undefined","toLowerCase","mapUnit","inputTemp","convertedTemp_1","convertedTemp_2","abs","react_default","createElement","class","for","type","id","placeholder","onKeyUp","required","React","Component","App","Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1581d504.chunk.js","sourcesContent":["\n  //converts temperature based on the unit\n  export function tryConvert(value, temperatureUnit) {\n    const input = value;\n   // console.log(\"inside tryconvert\"+  temperatureUnit)\n    //console.log(\"inside tryconvert\"+  input)\n    if (Number.isNaN(input)) {\n      return 'Invalid';\n    }\n    if (temperatureUnit ==='K'){\n        const output=  convertKtoC(input)\n        return roundNumber(output)\n    }else if(temperatureUnit === 'F'){\n        const output= convertFtoC(input)\n        return roundNumber(output)\n    }else if (temperatureUnit === 'R'){\n       const output= convertRtoC(input)\n       return roundNumber(output)\n    }else \n      return value\n  \n  }\n \n  //rounds number to one decimal\n  function  roundNumber(val){\n    const rounded = parseFloat(Math.round(val,1));\n    return rounded.toString();\n  }\n\n\n  function convertKtoC(temp){\n   temp = temp - 273.15\n  // console.log(\"convertKtoC\" + temp)\n   return temp\n  }\n\n  export function difference(a, b) {\n    return Math.abs(a - b);\n  }\n\n  function convertFtoC(temp){\n\n    temp = (temp - 32)  / 9.0 * 5.0\n   // console.log(\"convertFtoC\" + temp)\n    return temp\n  }\n\n  function convertRtoC(temp){\n\n    temp = (temp - 491.67) * 5.0/9.0\n   // console.log(\"convertRtoC\" + temp)\n    return temp\n  }\n\n  export function mapUnit(unit){\n  if(unit !== undefined){\n    if(unit.trim().toLowerCase() === 'celsius'){\n        return 'C'\n    }else if(unit.trim().toLowerCase() === 'kelvin'){\n        return 'K'\n    }else if (unit.trim().toLowerCase() === 'fahrenheit'){\n        return 'F'\n    }else if (unit.trim().toLowerCase() === 'rankine'){\n        return 'R'\n    }else \n        return 'Invalid'\n   }else \n        return 'Invalid'\n\n  }\n\n\n\n  \n\n\n  "," import React from 'react';\n import {tryConvert, mapUnit, difference} from './Module'\n \n  \n export default class Calculator extends React.Component {\n    constructor(props) {\n      super();\n      this.state ={\n        input : \"\",\n        inputUnit : \"\",\n        studentResponse : \"\",\n        targetUnit : \"\",\n        correction : \"\",\n        error : false,\n        message : \"\"\n      }\n      this.onChange =this.onChange.bind(this);\n      this.onSubmit =this.onSubmit.bind(this);\n      this.onKeyPress = this.onKeyPress.bind(this);\n    }\n   \n    //onChange of Input this event is called\n    onChange(e){\n\n        e.preventDefault();\n           this.setState(\n             {\n               [e.target.name] : e.target.value\n             }\n           )\n         }\n         onKeyPress(e){\n             console.log(\"Inside onKeyPress\")\n             if(e.keyCode===8 || e.keyCode===46){\n            this.setState({correction : \" \",\n               message : \"\"    })\n             }\n         }\n        \n        //OnSubmit handles all the validation and throws Invalid, valid and incorrect messages\n         onSubmit(e){\n            e.preventDefault();\n\n            \n           \n            const record = {\n                input : this.state.input,                \n                studentResponse :this.state.studentResponse,\n                targetUnit : this.state.targetUnit\n            }\n            //console.log(record)          \n            const inputSplitArray = record.input.trim().split(\" \")     \n                         \n            if(inputSplitArray.length ===2 ){  //checking the length of the first input\n                  let unit = mapUnit( inputSplitArray[1] )     //mapping to scale based on the user input   \n                  //console.log(\"unit\" + unit)\n              \n                  if (Number.isNaN( inputSplitArray[0])|| unit === \"Invalid\" ){\n                   \n                    this.setState({correction : \"Invalid\",\n                    message : \"Please enter Input Temperature in form of Value Unit, for example 84.2 Fahrenheit\" })\n                  }\n                  else if (Number.isNaN(record.targetUnit)){\n                    this.setState({correction : \"Incorrect\"})\n                  }else {\n                  record.inputTemp= inputSplitArray[0]     \n                  \n                  const convertedTemp_1  =  tryConvert(record.inputTemp, unit) //converting temperature to relavant unit\n                 \n                  const convertedTemp_2=   tryConvert(record.studentResponse, record.targetUnit)\n                 // console.log(\"convertedTemp_1\" + convertedTemp_1)\n                 // console.log(\"convertedTemp_2\" + convertedTemp_2)\n                      if(convertedTemp_1 ==='Invalid'){\n                        this.setState({correction : \"Invalid\"})\n                      }else if(difference(convertedTemp_1,convertedTemp_2) <1){\n                        this.setState({correction : \"Correct\"})\n                      }else{\n                        this.setState({correction : \"InCorrect\"})\n                      }\n                  }\n            }else{\n                  this.setState({correction : \"Invalid\",\n                  message : \"Please enter Input Temperature in form of Value Unit, for example 84.2 Fahrenheit\" })\n            }\n         \n          }\n  \n    render() {\n     \n      return (\n        <div class=\"scienceProject\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-8 m-auto\">\n                   \n                    <h1 class=\"display-6 text-center mx-auto\"> Temperature Unit-conversion Worksheets Evaluator </h1>\n                    <form onSubmit={this.onSubmit}>\n                      <div class=\"form-group\">\n                          <label class=\"control-label form-control-lg\" for=\"input\">Input Temperature</label>\n                          <input  class=\"form-control\" type=\"text\" id=\"input\" name=\"input\" placeholder=\"Input Temperature (VALUE UNIT for example 84.2 Fahrenheit)\" value = {this.state.input} \n                          onChange={this.onChange} onKeyUp={this.onKeyPress} required/>\n                      </div>\n                      <div class=\"form-group\">\n                        <label class=\"control-label form-control-lg\" for=\"input\">Target Units</label>\n                          <select class=\"form-control \" placeholder=\"Target Units\" name=\"targetUnit\" id=\"Target Units\"value = {this.state.targetUnit} onChange={this.onChange} onKeyUp={this.onKeyPress} required> \n                              <option value=\"\">Select Unit</option>\n                              <option value=\"K\">Kelvin</option>\n                              <option value=\"C\">Celsius</option>\n                              <option value=\"F\">Fahrenheit</option>\n                              <option value=\"R\">Rankine</option>\n                          </select>\n                      </div>\n                      <div class=\"form-group\">\n                          <label class=\"control-label form-control-lg\" for=\"Student Input\">Student Response</label>\n                          <input type=\"text\" class=\"form-control \" placeholder=\"Student Response\" name=\"studentResponse\"id=\"studentResponse\" value = {this.state.studentResponse} onChange={this.onChange} onKeyUp={this.onKeyPress} required/>\n                      </div>                     \n                      \n                      <input type=\"submit\" class=\"btn btn-primary btn-block mt-4\" value=\"Validate\" />\n                  </form>\n                  <div class=\"align-middle  mx-auto\">\n                     <p  class=\"font-weight-bold display-8 text-center\">{this.state.message} </p>\n                     </div>\n                    <div class=\"align-middle  mx-auto\">\n                      <p  class=\"font-weight-bold display-4 text-center\">{this.state.correction} </p>\n                    </div>\n                  \n                </div>\n            </div>\n        </div>\n    </div>\n      );\n    }\n  }\n  \n","import React, { Component } from 'react';\nimport Calculator from './Calculator';\nimport  \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n    <Calculator/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}